; https://www.rosettacode.org/wiki/Balanced_brackets

; Determine whether the string contains pairs of opening/closing
; brackets (in that order), none of which mis-nest.
(defun brackets-balanced? (str)
  (def left-brackets  { "{" 0 "(" 1 "[" 2 })
  (def right-brackets { "}" 0 ")" 1 "]" 2 })

  (defun iter (index stack) 
    (cond
      ((>= index (size str)) true)
      ((begin
        (def char (get str index))
        (cond
          ((has left-brackets char)
            (iter (inc index) (cons (get left-brackets char) stack)))
          ((has right-brackets char)
            (cond ((eq? (get right-brackets char) (get stack 0))
              (iter (inc index) (.slice stack 1)))
              (false)))
          ((iter (inc index) stack)))))))
  (iter 0 ()))

; Example
(brackets-balanced? "{}") ; true
(brackets-balanced? "{}[]()") ; true
(brackets-balanced? "{[()]}") ; true
(brackets-balanced? "{[}]") ; false
(brackets-balanced? ")(") ; false
