; Exercise 1.1
10 ; => 10

(+ 5 3 4) ; => 12

(- 9 1) ; => 8

(/ 6 2) ; => 3

(+ (* 2 4) (- 4 6)) ; => 6

(def a 3)

(def b (+ a 1))

(+ a b (* a b)) ; => 19

(= a b) ; => false

(if (and (> b a) (< b (* a b))) b a) ; => 4

(cond ((= a 4) 6) 
      ((= b 4) (+ 6 7 a))
      (else 25)) ; => 16

(+ 2 (if (> b a) b a)) ; => 6

(* (cond ((> a b) a)
         ((< a b) b)
         (else -1))
   (+ a 1)) ; => 16


; Exercise 1.2
(/ (+ 5 
      4 
      (- 2 
         (- 3 
            (+ 6 
               (/ 4 5)))))
   (* 3 
      (- 6 2)
      (- 2 7)))


; Exercise 1.3
(defun square (n) (* n n))
(defun sum-of-squares (x y) (+ (square x) (square y)))
(defun foo (x y z)
  (cond ((> z x) (foo z y x))
        ((> z y) (foo x z y))
        ((sum-of-squares x y))))


; Sqrt by Newton
(defun sqrt-newton (x)
  (defun square (n) (* n n))

  (defun average (x y) 
    (/ (+ x y) 2))

  (defun improve (guess x)
    (average guess (/ x guess)))

  (defun good-enough? (guess x)
    (< (abs (- (square guess)
               x))
       0.001))

  (defun sqrt-iter (guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x)
                   x)))
  
  (sqrt-iter 1 x))
