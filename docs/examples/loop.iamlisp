; Print numbers from 100 to 0

(loop (x 100)
      (print x)
      (cond (> x 0) (recur (- x 1))))

(defun print-range (from to)
  (cond 
    (neq? from to)
    (begin
      (print from)
      (print-range (inc from) to))))

; Fibonacci using iterative loop and tail call optimization

(defun fib-loop (n)
  (loop (x 0 y 1 i n)
    (cond (<= i 0) x (recur y (+ x y) (dec i)))))

(defun fib-tail (n) 
  (defun iter (x y i)
    (cond (<= i 0) x (iter y (+ x y) (dec i))))
  (iter 0 1 n))
