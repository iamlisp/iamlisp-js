(def defmacro (macro (name args . body) (def name (macro args . body))))
(defmacro defun (name args . body) (def name (lambda args . body)))
(defmacro comment (. body))

(def else true)
(def eq? =)
(def neq? !=)

(defmacro undefined?  (v) (eq? (typeof v) "Undefined"))
(defmacro list?       (v) (eq? (typeof v) "List"))
(defmacro symbol?     (v) (eq? (typeof v) "Symbol"))
(defmacro array?      (v) (eq? (typeof v) "Array"))
(defmacro string?     (v) (eq? (typeof v) "String"))
(defmacro map?        (v) (eq? (typeof v) "Map"))
(defmacro null?       (v) (eq? (typeof v) "Null"))
(defmacro boolean?    (v) (eq? (typeof v) "Boolean"))
(defmacro lambda?     (v) (eq? (typeof v) "Lambda"))

(defmacro if (cnd wt wf) (cond (cnd wt) 
                               (else wf)))


(defun assert (b)
  (cond ((not b) (throw (new js/Error "Assertion Error")))))

(defmacro identity (x) x)
(assert (eq? (identity "Foo") "Foo"))

(defmacro -> (val . fns) (.reduce 'fns (lambda (v fn) ((eval fn) v)) val))
(assert (eq? (-> "c" 
                 #(+ "b" %)
                 #(+ "a" %)) "abc"))
