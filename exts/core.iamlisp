(def defmacro (macro (name args . body) (def name (macro args . body))))
(defmacro defun (name args . body) (def name (lambda args . body)))

(def eq? =)
(def neq? !=)

(defun assert (b)
  (cond ((not b) (throw (new js/Error "Assertion Error")))))

(defmacro identity (x) x)
(assert (eq? (identity "Foo") "Foo"))

(defmacro -> (. fns) (lambda (v) (.reduce 'fns (lambda (v fn) ((eval fn) v)) v)))
(defmacro <- (. fns) (eval (cons '-> (.reverse 'fns))))

(defmacro null? (l) (eq? l null))
(assert (null? null))
(assert (not (null? (list))))
(assert (not (null? "Hello")))
(assert (not (null? 123)))
