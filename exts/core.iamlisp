(def defmacro (macro (name args . body) (def name (macro args . body))))
(defmacro defun (name args . body) (def name (lambda args . body)))
(defmacro comment (. body))

(def else true)
(def eq? =)
(def neq? !=)
(defmacro defined? (v) (neq? v undefined))
(defmacro if (cnd wt wf) (cond (cnd wt) 
                               (else wf)))

(defun assert (b)
  (cond ((not b) (throw (new js/Error "Assertion Error")))))

(defmacro identity (x) x)
(assert (eq? (identity "Foo") "Foo"))

(defmacro -> (val . fns) (.reduce 'fns (lambda (v fn) ((eval fn) v)) val))
(assert (eq? (-> "c" 
                 (+ "b" _)
                 (+ "a" _)) "abc"))

(defmacro null? (l) (eq? l null))
(assert (null? null))
(assert (not (null? (list))))
(assert (not (null? "Hello")))
(assert (not (null? 123)))
