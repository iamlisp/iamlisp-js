(def defmacro (macro (name args . body) (def name (macro args . body))))
(defmacro defun (name args . body) (def name (lambda args . body)))

(def eq? =)
(def neq? !=)
(def nil '())

(defmacro backwards (. body) (eval (cons 'begin (.reverse 'body))))
(defmacro -> (. fns) (lambda (v) (.reduce 'fns (lambda (v fn) ((eval fn) v)) v)))
(defmacro <- (. fns) (eval (cons '-> (.reverse 'fns))))

(defmacro null? (l) (eq? l null))
(defmacro while (condition body) (cond condition (begin body (while condition body)) null))
(defmacro head (v) (get v 0))
