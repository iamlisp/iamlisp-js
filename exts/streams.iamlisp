; Core abstractions
(defmacro defer (xs)
  (where (executed? false
          result null)
    ^{"deferred" true} (lambda ()
      (cond ((not executed?) (set! result xs  
                                   executed? true)))
      result)))

(defun deferred? (sxs) (and (eq? (typeof sxs) "Lambda")
                            (eq? (typeof (get-meta sxs)) "Map")
                            (get "deferred" (get-meta sxs))))

(defun raise (sxs) (cond ((deferred? sxs) (sxs)) (sxs)))

(defmacro scons (x y) (list x (defer y)))

(defun scar (xs) (nth 0 xs))

(defun scdr (xs) (raise (nth 1 xs)))

(def SNil (scons null null))

(defun sempty? (sxs) (eq? sxs SNil))


; Generators
(defun srepeat (s) (scons s (srepeat s)))

(defun srange (from to) (cond ((> from to) SNil)
                              ((scons from (srange (inc from) to)))))

(defun srange-from (from) (scons from (srange-from (inc from))))


; Operators
(defun stake (n sxs) (cond ((and (pos? n) 
                                 (not (sempty? sxs)))
                            (scons (scar sxs) (stake (dec n) (scdr sxs)))) 
                           (SNil)))

(defun sdrop (n sxs) (cond ((sempty? sxs) SNil)
                           ((and (<= n 0)) sxs)
                           ((sdrop (dec n) (scdr sxs)))))

(defun smap (fn sxs) (cond ((sempty? sxs) SNil)
                           ((scons (fn (scar sxs)) (smap fn (scdr sxs))))))

(defun sfilter (fn sxs) (cond ((sempty? sxs) SNil)
                              ((fn (scar sxs)) 
                               (scons (scar sxs) (sfilter fn (scdr sxs))))
                              ((sfilter fn (scdr sxs)))))

(defun szipwith (fn sxs sys)
    (cond ((sempty? sxs) SNil)
          ((sempty? sys) SNil)
          ((scons (fn (scar sxs) (scar sys))
                  (szipwith fn (scdr sxs) (scdr sys))))))

; Terminals
(defun sto-list (sxs)
  (defun iter (sxs left res)
    (cond ((zero? left) (+: "..." res))
          ((not (sempty? sxs))
           (iter (scdr sxs)
                 (dec left)
                 (+: (scar sxs) res)))
          (res)))
  (reverse (iter sxs 100 Nil)))

(comment 
  (def fibsexp (scons 0 (scons 1 (szipwith + (scdr fibsexp) fibsexp))))
  (sto-list (stake 12 fibsexp)))
